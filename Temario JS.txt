--Intro
variables
tipo de datos
consvension de tipos Castin y coercion
operadores de comparacion
operadores logicos
Ejercicios-----------

--Estructura de control y logica
codicionales (IF. IF ELSE, Switch)
iteradores, bucles, loops (do while, for, while)
Ejercicios-----------

--Funciones
Parametros(rest)
funciones callback
funciones anidadas
funciones anonimas
la recursividad
ambito scope. Hoisting, lexico
Spread operator:tambien aqui

--Arreglos
Mutabilidad e inmutabilidad de Arrays
Iteracion o boocles array (for in, for of)
Filtrado, Transformación y reducción con filter(), reduce(), map()
Búsqueda de elementos find(), findIndex(), some(), every() 
Crear copias con slice()
Spread operator: casos de uso
array multidimeccional, array bidimecional, array tridimencional

---Programación Orientada a Objetos
Programación Orientada a Objetos en JavaScript: Conceptos y Práctica
Creación y Manipulación de Objetos en JavaScript
Función constructora y gestión de instancias en JavaScript

---Clases en JavaScript: Creación y Uso de Objetos con Sintaxis Moderna
Programación Orientada a Objetos en JavaScript: Clases y Prototipos
Prototipos y Herencia en JavaScript: Construcción y Uso Práctico
Métodos y herencia prototípica en JavaScript
Uso de "this" en Clases y Funciones Constructoras
Validación de Usuarios en una Red Social: Algoritmo Básico
Implementación de la Función Sign-In y Validación de Usuario

NaN es Not-A-Number (No es Un Número) 

const persona2 = new Object();
const colores = new Array("rojo", "verde", "azul");
person.luckyNumbers.forEach((elem)=> { contador += elem })




var person = {
    name: "John",                //String
    lastName: "Doe",
    age: 35,                     //Number
    gender: "male",
    luckyNumbers: [7, 11, 13, 17], //Array
    significantOther: person2   //Object, yes, the same variable/object defined after
};

var person2 = {
    name: "Jane",
    lastName: "Doe",
    age: 38,
    gender: "female",
    luckyNumbers: [2, 4, 6, 8],
    significantOther: person
};

var family = {
    lastName: "Doe",
    members: [person, person2]   //Array of objects, don't forget to add Jimmy
};


function addAllFamilyLuckyNumbers(anArray){
  let sumOfAllLuckyNumbers = 0; //sumOfAllLuckyNumbers is a number, the sum of all lucky numbers.

  //To-Do: loop and add; consider nested loops
  //Hint: use the anArray variable to get all of the lucky numbers
  contador1=0;
  contador2=0;
  contador3=0;

family.members[0].luckyNumbers.forEach((elem) => { contador1 += elem})
family.members[1].luckyNumbers.forEach((elem) => { contador2 += elem})
family.members[2].luckyNumbers.forEach((elem) => { contador3 += elem})
  sumOfAllLuckyNumbers = contador1 + contador2 + contador3;
  
  return sumOfAllLuckyNumbers;
}

//Enter all your code here:
person.luckyNumbers[3] = 33;
let person3 = new Object();
person3.name = "Jimmy ";
person3.lastName = "Doe";
person3.age = 13;
person3.gender = "male";
person3.luckyNumbers = [1, 2, 3, 4];
person3.significantOther = null;

family.members.push(person3);

//Do not make changes below:
console.log(addAllFamilyLuckyNumbers(family.members)); 